{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPHEHA0s+n4rWzYMz6cNkZ2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["To improve our model, we can spend time trying different configurations, adding more layers or tuning the hyperparameters.\n","\n","But doing that is very time consuming, we can simply use transfer learning to take the patterns another model has learnt from another problem and using them for our own problem."],"metadata":{"id":"kMk8CnKfvE3-"}},{"cell_type":"code","source":["import datetime\n","print(f'Notebook last run (end-to-end): {datetime.datetime.now()}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"woVf6t15v9bq","executionInfo":{"status":"ok","timestamp":1688739359734,"user_tz":-480,"elapsed":12,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}},"outputId":"0336e879-a1b3-44db-b294-8c97c92c4c83"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Notebook last run (end-to-end): 2023-07-07 14:16:01.012514\n"]}]},{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2n1W4bj3wEtp","executionInfo":{"status":"ok","timestamp":1688739359734,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}},"outputId":"bb201c49-5aff-4ee4-97de-c8a5d0ccbd7c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: nvidia-smi: command not found\n"]}]},{"cell_type":"code","source":["import zipfile\n","\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","\n","zip_ref = zipfile.ZipFile('10_food_classes_10_percent.zip')\n","zip_ref.extractall()\n","zip_ref.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VHwQbg6vwJtF","executionInfo":{"status":"ok","timestamp":1688739362680,"user_tz":-480,"elapsed":2951,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}},"outputId":"3718b552-709c-4bcd-e7f2-131e392bcdf7"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-07-07 14:16:01--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 64.233.191.128, 173.194.74.128, 173.194.192.128, ...\n","Connecting to storage.googleapis.com (storage.googleapis.com)|64.233.191.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 168546183 (161M) [application/zip]\n","Saving to: ‘10_food_classes_10_percent.zip’\n","\n","10_food_classes_10_ 100%[===================>] 160.74M   186MB/s    in 0.9s    \n","\n","2023-07-07 14:16:02 (186 MB/s) - ‘10_food_classes_10_percent.zip’ saved [168546183/168546183]\n","\n"]}]},{"cell_type":"code","source":["import os\n","\n","for dirpath, dirnames, filenames in os.walk('10_food_classes_10_percent'):\n","  print(f'There are {len(dirnames)} directories and {len(filenames)} images in {dirpath}.')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K8aPzeU0weDb","executionInfo":{"status":"ok","timestamp":1688739362681,"user_tz":-480,"elapsed":14,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}},"outputId":"10071b52-e5f1-4357-8040-d3d2e93e8a82"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 2 directories and 0 images in 10_food_classes_10_percent.\n","There are 10 directories and 0 images in 10_food_classes_10_percent/train.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/chicken_curry.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/sushi.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/chicken_wings.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/grilled_salmon.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/hamburger.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/ramen.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/fried_rice.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/pizza.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/ice_cream.\n","There are 0 directories and 75 images in 10_food_classes_10_percent/train/steak.\n","There are 10 directories and 0 images in 10_food_classes_10_percent/test.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/chicken_curry.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/sushi.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/chicken_wings.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/grilled_salmon.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/hamburger.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/ramen.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/fried_rice.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/pizza.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/ice_cream.\n","There are 0 directories and 250 images in 10_food_classes_10_percent/test/steak.\n"]}]},{"cell_type":"markdown","source":["Creating data loaders."],"metadata":{"id":"vp0WMP3jwtIb"}},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator"],"metadata":{"id":"hsqxFTvvwxc6","executionInfo":{"status":"ok","timestamp":1688739370783,"user_tz":-480,"elapsed":8112,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["IMAGE_SHAPE = (224,224)\n","BATCH_SIZE = 32\n","\n","train_dir = '10_food_classes_10_percent/train/'\n","test_dir = '10_food_classes_10_percent/test/'\n","\n","train_datagen = ImageDataGenerator(rescale = 1/255)\n","\n","train_data_10_percent = train_datagen.flow_from_directory(train_dir,\n","                                                          target_size = IMAGE_SHAPE,\n","                                                          batch_size = BATCH_SIZE,\n","                                                          class_mode = 'categorical')\n","\n","test_data = train_datagen.flow_from_directory(test_dir,\n","                                              target_size = IMAGE_SHAPE,\n","                                              batch_size = BATCH_SIZE,\n","                                              class_mode = 'categorical')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"09y0vbBWw0TC","executionInfo":{"status":"ok","timestamp":1688739372150,"user_tz":-480,"elapsed":1374,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}},"outputId":"83027021-ab5e-44d0-b9c3-49608369cb26"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 750 images belonging to 10 classes.\n","Found 2500 images belonging to 10 classes.\n"]}]},{"cell_type":"markdown","source":["Callbacks."],"metadata":{"id":"kC8m1DHuxQMa"}},{"cell_type":"markdown","source":["1. Experiment tracking with TensorBoard\n","2. Model checkpointing\n","3. Early stopping"],"metadata":{"id":"flGKFAebxaNw"}},{"cell_type":"code","source":["def create_tensorboard_callback(dirname, experiment_name):\n","  log_dir = dirname + '/' + experiment_name + '/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\n","  tensorboard_callback = tf.keras.callbacks.TensorBoard(\n","      log_dir = log_dir\n","  )\n","  print(f'Saving TensorBoard log files to: {log_dir}')\n","  return tensorboard_callback"],"metadata":{"id":"NErd0vuaxcon","executionInfo":{"status":"ok","timestamp":1688739372151,"user_tz":-480,"elapsed":6,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["Creating models using TensorFlow Hub."],"metadata":{"id":"u26mqirDx9qa"}},{"cell_type":"code","source":["import tensorflow as tf\n","import tensorflow_hub as hub\n","from tensorflow.keras import layers"],"metadata":{"id":"A-mndIsqyC2X","executionInfo":{"status":"ok","timestamp":1688739372151,"user_tz":-480,"elapsed":5,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["resnet_url = \"https://tfhub.dev/google/imagenet/resnet_v2_50/feature_vector/5\"\n","efficientnet_url = \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_b0/feature_vector/2\""],"metadata":{"id":"Lph14ROby3n1","executionInfo":{"status":"ok","timestamp":1688739372151,"user_tz":-480,"elapsed":4,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def create_model(model_url, num_classes = 10):\n","  \"\"\"\n","  Takes a TensorFlow Hub URL and creates a tf.keras Sequential model with it.\n","  \"\"\"\n","  feature_extractor_layer = hub.KerasLayer(model_url,\n","                                           trainable = False, #freeze the underlying patterns\n","                                           name = 'feature_extraction_layer',\n","                                           input_shape = IMAGE_SHAPE + (3,)\n","                                           )\n","\n","  model = tf.keras.Sequential([\n","      feature_extractor_layer,\n","      layers.Dense(num_classes, activation = 'softmax', name = 'output_layer')\n","  ])\n","\n","  return model"],"metadata":{"id":"dZ-XmMqJy_K9","executionInfo":{"status":"ok","timestamp":1688739372152,"user_tz":-480,"elapsed":5,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["ResNet Model."],"metadata":{"id":"rz5Lpt2DzJ30"}},{"cell_type":"code","source":["resnet_model = create_model(resnet_url, num_classes = train_data_10_percent.num_classes)"],"metadata":{"id":"DeJKNtNvzkad","executionInfo":{"status":"ok","timestamp":1688739381837,"user_tz":-480,"elapsed":9690,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["resnet_model.compile(loss = 'categorical_crossentropy',\n","                     optimizer = tf.keras.optimizers.Adam(),\n","                     metrics = ['accuracy'])"],"metadata":{"id":"bPWVbMcZzq-Q","executionInfo":{"status":"ok","timestamp":1688739382753,"user_tz":-480,"elapsed":926,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["resnet_history = resnet_model.fit(train_data_10_percent,\n","                                  epochs = 5,\n","                                  steps_per_epoch = len(train_data_10_percent),\n","                                  validation_data = test_data,\n","                                  validation_steps = len(test_data),\n","                                  callbacks = [create_tensorboard_callback(dirname = 'tensorflow_hub',\n","                                                                           experiment_name = 'resnet50V2')])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"8CcNKNKIzyeL","executionInfo":{"status":"error","timestamp":1688739821855,"user_tz":-480,"elapsed":439108,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}},"outputId":"6b22fb3c-9539-4bbf-82e3-e26281e918e5"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Saving TensorBoard log files to: tensorflow_hub/resnet50V2/20230707-141624\n","Epoch 1/5\n","24/24 [==============================] - ETA: 0s - loss: 1.8684 - accuracy: 0.3893"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-668b00aee23e>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m resnet_history = resnet_model.fit(train_data_10_percent,\n\u001b[0m\u001b[1;32m      2\u001b[0m                                   \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m                                   \u001b[0msteps_per_epoch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data_10_percent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                                   \u001b[0mvalidation_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                                   \u001b[0mvalidation_steps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1727\u001b[0m                             \u001b[0msteps_per_execution\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_steps_per_execution\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1728\u001b[0m                         )\n\u001b[0;32m-> 1729\u001b[0;31m                     val_logs = self.evaluate(\n\u001b[0m\u001b[1;32m   1730\u001b[0m                         \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_x\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1731\u001b[0m                         \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_y\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(self, x, y, batch_size, verbose, sample_weight, steps, callbacks, max_queue_size, workers, use_multiprocessing, return_dict, **kwargs)\u001b[0m\n\u001b[1;32m   2070\u001b[0m                         ):\n\u001b[1;32m   2071\u001b[0m                             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_test_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2072\u001b[0;31m                             \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtest_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2073\u001b[0m                             \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2074\u001b[0m                                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    892\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    893\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 894\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    895\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    896\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    931\u001b[0m       \u001b[0;31m# In this case we have not created variables on the first call. So we can\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    932\u001b[0m       \u001b[0;31m# run the first trace but we should fail if variables are created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 933\u001b[0;31m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable_creation_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    934\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_created_variables\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mALLOW_DYNAMIC_VARIABLE_CREATION\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    935\u001b[0m         raise ValueError(\"Creating variables on a non-first call to a function\"\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compiler.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    141\u001b[0m       (concrete_function,\n\u001b[1;32m    142\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m--> 143\u001b[0;31m     return concrete_function._call_flat(\n\u001b[0m\u001b[1;32m    144\u001b[0m         filtered_flat_args, captured_inputs=concrete_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m    145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1755\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1756\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1757\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1758\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1759\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    379\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 381\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    382\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     50\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     53\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     54\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot the validation and training data separately\n","def plot_loss_curves(history):\n","  \"\"\"\n","  Returns separate loss curves for training and validation metrics.\n","  \"\"\"\n","  loss = history.history['loss']\n","  val_loss = history.history['val_loss']\n","\n","  accuracy = history.history['accuracy']\n","  val_accuracy = history.history['val_accuracy']\n","\n","  epochs = range(len(history.history['loss']))\n","\n","  # Plot loss\n","  plt.plot(epochs, loss, label='training_loss')\n","  plt.plot(epochs, val_loss, label='val_loss')\n","  plt.title('Loss')\n","  plt.xlabel('Epochs')\n","  plt.legend()\n","\n","  # Plot accuracy\n","  plt.figure()\n","  plt.plot(epochs, accuracy, label='training_accuracy')\n","  plt.plot(epochs, val_accuracy, label='val_accuracy')\n","  plt.title('Accuracy')\n","  plt.xlabel('Epochs')\n","  plt.legend();"],"metadata":{"id":"LAMWabnv0CrL","executionInfo":{"status":"aborted","timestamp":1688739821855,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_loss_curves(resnet_history)"],"metadata":{"id":"w30YE9ew3j32","executionInfo":{"status":"aborted","timestamp":1688739821855,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Resnet summary\n","resnet_model.summary()"],"metadata":{"id":"hjJXNS473lFY","executionInfo":{"status":"aborted","timestamp":1688739821856,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["efficientnet_model = create_model(model_url = efficientnet_url,\n","                                  num_classes = train_data_10_percent.num_classes)\n","\n","efficientnet_model.compile(loss ='categorical_crossentropy',\n","                           optimizer = tf.keras.optimizers.Adam(),\n","                           metrics = ['accuracy'])\n","\n","efficientnet_history = efficientnet_model.fit(train_data_10_percent,\n","                                              epochs = 5,\n","                                              steps_per_epoch = len(train_data_10_percent),\n","                                              validation_data = test_data,\n","                                              validation_steps = len(test_data),\n","                                              callbacks = [create_tensorboard_callback(dirname = 'tensorflow_hub',\n","                                                                                       experiment_name = 'efficientnetB0')])"],"metadata":{"id":"tr-Vpw5d3nay","executionInfo":{"status":"aborted","timestamp":1688739821856,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Upload TensorBoard dev records\n","!tensorboard dev upload --logdir ./tensorflow_hub/ \\\n","  --name \"EfficientNetB0 vs. ResNet50V2\" \\\n","  --description \"Comparing two different TF Hub feature extraction models architectures using 10% of training images\" \\\n","  --one_shot"],"metadata":{"id":"AW6qN3zt4L8p","executionInfo":{"status":"aborted","timestamp":1688739821857,"user_tz":-480,"elapsed":10,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["https://tensorboard.dev/experiment/TB5TOyCRSyOP9d4yFrzG9g/"],"metadata":{"id":"74zSKgMg7Rm1"}},{"cell_type":"code","source":["!wget https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/helper_functions.py\n","\n","from helper_functions import create_tensorboard_callback, plot_loss_curves, unzip_data, walk_through_dir"],"metadata":{"id":"66RN59q97gq2","executionInfo":{"status":"aborted","timestamp":1688739821857,"user_tz":-480,"elapsed":10,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","\n","unzip_data(\"10_food_classes_10_percent.zip\")"],"metadata":{"id":"Bww3uTypjDbx","executionInfo":{"status":"aborted","timestamp":1688739821858,"user_tz":-480,"elapsed":11,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["walk_through_dir(\"10_food_classes_10_percent\")"],"metadata":{"id":"UZ29xJfIjLqe","executionInfo":{"status":"aborted","timestamp":1688739821858,"user_tz":-480,"elapsed":11,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_dir = \"10_food_classes_10_percent/train/\"\n","test_dir = \"10_food_classes_10_percent/test/\""],"metadata":{"id":"Q8t8OWHhjN-L","executionInfo":{"status":"aborted","timestamp":1688739821858,"user_tz":-480,"elapsed":11,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","IMG_SIZE = (224,224)\n","train_data_10_percent = tf.keras.preprocessing.image_dataset_from_directory(directory = train_dir,\n","                                                                            image_size = IMG_SIZE,\n","                                                                            label_mode = 'categorical',\n","                                                                            batch_size = 32)\n","test_data_10_percent = tf.keras.preprocessing.image_dataset_from_directory(directory = test_dir,\n","                                                                           image_size = IMG_SIZE,\n","                                                                           label_mode = 'categorical')"],"metadata":{"id":"B1HSs1-BjPql","executionInfo":{"status":"aborted","timestamp":1688739821859,"user_tz":-480,"elapsed":11,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_data_10_percent.class_names"],"metadata":{"id":"wCkYY6O8kCek","executionInfo":{"status":"aborted","timestamp":1688739821859,"user_tz":-480,"elapsed":11,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for image,labels in train_data_10_percent.take(1):\n","  print(image, labels)"],"metadata":{"id":"v8mO2whzkK44","executionInfo":{"status":"aborted","timestamp":1688739821859,"user_tz":-480,"elapsed":11,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Building a transfer learning model with Keras Functional API."],"metadata":{"id":"Cu2SubRNkP3T"}},{"cell_type":"code","source":["base_model = tf.keras.applications.EfficientNetB0(include_top=False)"],"metadata":{"id":"P8OqASFnkVat","executionInfo":{"status":"aborted","timestamp":1688739821860,"user_tz":-480,"elapsed":12,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_model.trainable = False\n","\n","inputs = tf.keras.layers.Input(shape = (224,224,3), name = 'input_layer')\n","x = base_model(inputs)\n","x = tf.keras.layers.GlobalAveragePooling2D(name = 'global_average_pooling_layer')(x)\n","outputs = tf.keras.layers.Dense(10, activation = 'softmax', name = 'output_layer')(x)\n","\n","model_0 = tf.keras.Model(inputs, outputs)\n","\n","model_0.compile(loss = 'categorical_crossentropy',\n","                optimizer = tf.keras.optimizers.Adam(),\n","                metrics = ['accuracy'])\n","\n","history_10_percent = model_0.fit(train_data_10_percent,\n","                                 epochs = 5,\n","                                 steps_per_epoch = len(train_data_10_percent),\n","                                 validation_data = test_data_10_percent,\n","                                 validation_steps = int(0.25 * len(test_data_10_percent)),\n","                                 callbacks = create_tensorboard_callback('transfer_learning', '10_percent_feature_extract'))"],"metadata":{"id":"8URazO0NlBIu","executionInfo":{"status":"aborted","timestamp":1688739821860,"user_tz":-480,"elapsed":12,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for layer_number, layer in enumerate(base_model.layers):\n","  print(layer_number, layer.name)"],"metadata":{"id":"-jjWH6YhmP_4","executionInfo":{"status":"aborted","timestamp":1688739821861,"user_tz":-480,"elapsed":13,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_model.summary()"],"metadata":{"id":"V0b5H-gdlwvD","executionInfo":{"status":"aborted","timestamp":1688739821862,"user_tz":-480,"elapsed":14,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_loss_curves(history_10_percent)"],"metadata":{"id":"SN6ZYqqumc9A","executionInfo":{"status":"aborted","timestamp":1688739821862,"user_tz":-480,"elapsed":13,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Download and unzip data\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_1_percent.zip\n","unzip_data(\"10_food_classes_1_percent.zip\")\n","\n","# Create training and test dirs\n","train_dir_1_percent = \"10_food_classes_1_percent/train/\"\n","test_dir = \"10_food_classes_1_percent/test/\""],"metadata":{"id":"mgnd1iw3mimV","executionInfo":{"status":"aborted","timestamp":1688739821863,"user_tz":-480,"elapsed":464664,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["walk_through_dir(\"10_food_classes_1_percent\")"],"metadata":{"id":"umzKDTCjoTBI","executionInfo":{"status":"aborted","timestamp":1688739821864,"user_tz":-480,"elapsed":464660,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_data_1_percent = tf.keras.preprocessing.image_dataset_from_directory(train_dir_1_percent,\n","                                                                           label_mode = 'categorical',\n","                                                                           batch_size = 32,\n","                                                                           image_size = IMG_SIZE)\n","test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n","                                                                label_mode = 'categorical',\n","                                                                image_size = IMG_SIZE)"],"metadata":{"id":"ZT5dk-S5oVpc","executionInfo":{"status":"aborted","timestamp":1688739821864,"user_tz":-480,"elapsed":464655,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tf.__version__"],"metadata":{"id":"eXdL5ADFolO9","executionInfo":{"status":"aborted","timestamp":1688739821864,"user_tz":-480,"elapsed":464650,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","data_augmentation = keras.Sequential([\n","    layers.RandomFlip('horizontal'),\n","    layers.RandomRotation(0.2),\n","    layers.RandomZoom(0.2),\n","    layers.RandomHeight(0.2),\n","    layers.RandomWidth(0.2)\n","], name = 'data_augmentation')"],"metadata":{"id":"MECYBVrrooft","executionInfo":{"status":"aborted","timestamp":1688739821865,"user_tz":-480,"elapsed":464647,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","import os\n","import random\n","target_class = random.choice(train_data_1_percent.class_names)\n","target_dir = '10_food_classes_1_percent/train/' + target_class\n","random_image = random.choice(os.listdir(target_dir))\n","random_image_path = target_dir + '/' + random_image\n","img = mpimg.imread(random_image_path)\n","plt.imshow(img)\n","plt.title(f'Original random image from class: {target_class}')\n","plt.axis(False);\n","\n","augmented_img = data_augmentation(tf.expand_dims(img, axis = 0))\n","plt.figure()\n","plt.imshow(tf.squeeze(augmented_img/255))\n","plt.title(f'Augmented random image from class: {target_class}')\n","plt.axis(False)"],"metadata":{"id":"-Neb0136xliy","executionInfo":{"status":"aborted","timestamp":1688739821865,"user_tz":-480,"elapsed":464643,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["input_shape = (224, 224, 3)\n","base_model = tf.keras.applications.EfficientNetB0(include_top = False)\n","base_model.trainable = False\n","\n","inputs = layers.Input(shape = input_shape, name = 'input_layer')\n","x = data_augmentation(inputs)\n","x = base_model(x, training = False)\n","x = layers.GlobalAveragePooling2D(name = 'global_average_pooling_layer')(x)\n","outputs = layers.Dense(10, activation = 'softmax', name = 'output_layer')(x)\n","model_1 = keras.Model(inputs, outputs)\n","\n","model_1.compile(loss = 'categorical_crossentropy',\n","                optimizer = tf.keras.optimizers.Adam(),\n","                metrics = ['accuracy'])\n","\n","history_1_percent = model_1.fit(train_data_1_percent,\n","                                epochs = 5,\n","                                steps_per_epoch = len(train_data_1_percent),\n","                                validation_data = test_data,\n","                                validation_steps = len(test_data),\n","                                callbacks = [create_tensorboard_callback('transfer_learning', '1_percent_data_aug')])"],"metadata":{"id":"RSCmYtAy9Qwg","executionInfo":{"status":"aborted","timestamp":1688739821866,"user_tz":-480,"elapsed":464638,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_1.summary()"],"metadata":{"id":"CeB4WZYg-S4s","executionInfo":{"status":"aborted","timestamp":1688739821866,"user_tz":-480,"elapsed":464633,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_loss_curves(history_1_percent)"],"metadata":{"id":"StpEHmxC_AGH","executionInfo":{"status":"aborted","timestamp":1688739821866,"user_tz":-480,"elapsed":464628,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_dir_10_percent = \"10_food_classes_10_percent/train/\"\n","test_dir = \"10_food_classes_10_percent/test/\""],"metadata":{"id":"qBBAsSYp_KeH","executionInfo":{"status":"aborted","timestamp":1688739821867,"user_tz":-480,"elapsed":464624,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_data_10_percent = tf.keras.preprocessing.image_dataset_from_directory(train_dir_10_percent,\n","                                                                            label_mode = 'categorical',\n","                                                                            image_size = IMG_SIZE)\n","\n","test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n","                                                                label_mode = 'categorical',\n","                                                                image_size = IMG_SIZE)"],"metadata":{"id":"7r-8o_O5_cEC","executionInfo":{"status":"aborted","timestamp":1688739821867,"user_tz":-480,"elapsed":464621,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers\n","from tensorflow.keras.models import Sequential\n","\n","data_augmentation = keras.Sequential([\n","    layers.RandomFlip('horizontal'),\n","    layers.RandomRotation(0.2),\n","    layers.RandomZoom(0.2),\n","    layers.RandomHeight(0.2),\n","    layers.RandomWidth(0.2),\n","], name = 'data_augmentation')\n","\n","input_shape = (224,224,3)\n","\n","base_model = tf.keras.applications.EfficientNetB0(include_top = False)\n","base_model.trainable = False\n","\n","inputs = layers.Input(shape = input_shape, name = 'input_layer')\n","x = data_augmentation(inputs)\n","x = base_model(x, training = False)\n","x = layers.GlobalAveragePooling2D(name = 'global_average_pooling_layer')(x)\n","outputs = layers.Dense(10, activation = 'softmax', name = 'output_layer')(x)\n","model_2 = tf.keras.Model(inputs, outputs)\n","\n","model_2.compile(loss = 'categorical_crossentropy',\n","                optimizer = tf.keras.optimizers.Adam(learning_rate = 0.001),\n","                metrics = ['accuracy'])"],"metadata":{"id":"TP6dAcOl_awv","executionInfo":{"status":"aborted","timestamp":1688739821868,"user_tz":-480,"elapsed":464617,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Creating model checkpoint callback"],"metadata":{"id":"JJj5Lh9eA73b"}},{"cell_type":"code","source":["checkpoint_path = '10%_model_checkpoints_weights/checkpoint.ckpt'\n","\n","checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(filepath = checkpoint_path,\n","                                                         save_weights_only = True,\n","                                                         save_best_only = True,\n","                                                         save_freq = 'epoch',\n","                                                         verbose = 0)"],"metadata":{"id":"hYl9uyMcBIps","executionInfo":{"status":"aborted","timestamp":1688739821868,"user_tz":-480,"elapsed":464614,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["initial_epochs = 5\n","history_10_percent_data_aug = model_2.fit(train_data_10_percent,\n","                                          epochs = initial_epochs,\n","                                          validation_data = test_data,\n","                                          validation_steps = int(0.25 * len(test_data)),\n","                                          callbacks = [create_tensorboard_callback('transfer_learning', '10_percent_data_aug'),\n","                                                       checkpoint_callback])"],"metadata":{"id":"ObRXX606BmXU","executionInfo":{"status":"aborted","timestamp":1688739821868,"user_tz":-480,"elapsed":464610,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_loss_curves(history_10_percent_data_aug)"],"metadata":{"id":"edJ_1ZJUB30J","executionInfo":{"status":"aborted","timestamp":1688739821869,"user_tz":-480,"elapsed":464606,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Load in saved model weights and evaluate model\n","model_2.load_weights(checkpoint_path)\n","loaded_weight_model_results = model_2.evaluate(test_data)"],"metadata":{"id":"nSSffQp5FQDM","executionInfo":{"status":"aborted","timestamp":1688739822241,"user_tz":-480,"elapsed":6,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for layer in model_2.layers:\n","  print(layer.trainable)"],"metadata":{"id":"QGL44YxkFauz","executionInfo":{"status":"aborted","timestamp":1688739822242,"user_tz":-480,"elapsed":7,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_model.trainable = True\n","for layer in base_model.layers[:-10]:\n","  layer.trainable = False\n","\n","model_2.compile(loss = 'categorical_crossentropy',\n","                optimizer = tf.keras.optimizers.Adam(learning_rate = 0.0001),\n","                metrics = ['accuracy'])"],"metadata":{"id":"m-GnVg5fFhZS","executionInfo":{"status":"aborted","timestamp":1688739822242,"user_tz":-480,"elapsed":7,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for layer_number, layer in enumerate(base_model.layers):\n","  print(layer_number, layer.name, layer.trainable)"],"metadata":{"id":"vkeBb2zPF0G-","executionInfo":{"status":"aborted","timestamp":1688739822243,"user_tz":-480,"elapsed":8,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(model_2.trainable_variables))"],"metadata":{"id":"hsP80iIjF5f2","executionInfo":{"status":"aborted","timestamp":1688739822243,"user_tz":-480,"elapsed":8,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["finetune_epochs = initial_epochs + 5\n","history_fine_10_percent_data_aug = model_2.fit(train_data_10_percent,\n","                                               epochs = finetune_epochs,\n","                                               validation_data = test_data,\n","                                               validation_steps = int(0.25 * len(test_data)),\n","                                               callbacks = [create_tensorboard_callback('transfer_learning', '10_percent_fine_tune_last_10')])"],"metadata":{"id":"ya6_Cho7F9vf","executionInfo":{"status":"aborted","timestamp":1688739822243,"user_tz":-480,"elapsed":7,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def compare_historys(original_history, new_history, initial_epochs=5):\n","    \"\"\"\n","    Compares two model history objects.\n","    \"\"\"\n","    # Get original history measurements\n","    acc = original_history.history[\"accuracy\"]\n","    loss = original_history.history[\"loss\"]\n","\n","    print(len(acc))\n","\n","    val_acc = original_history.history[\"val_accuracy\"]\n","    val_loss = original_history.history[\"val_loss\"]\n","\n","    # Combine original history with new history\n","    total_acc = acc + new_history.history[\"accuracy\"]\n","    total_loss = loss + new_history.history[\"loss\"]\n","\n","    total_val_acc = val_acc + new_history.history[\"val_accuracy\"]\n","    total_val_loss = val_loss + new_history.history[\"val_loss\"]\n","\n","    print(len(total_acc))\n","    print(total_acc)\n","\n","    # Make plots\n","    plt.figure(figsize=(8, 8))\n","    plt.subplot(2, 1, 1)\n","    plt.plot(total_acc, label='Training Accuracy')\n","    plt.plot(total_val_acc, label='Validation Accuracy')\n","    plt.plot([initial_epochs-1, initial_epochs-1],\n","              plt.ylim(), label='Start Fine Tuning') # reshift plot around epochs\n","    plt.legend(loc='lower right')\n","    plt.title('Training and Validation Accuracy')\n","\n","    plt.subplot(2, 1, 2)\n","    plt.plot(total_loss, label='Training Loss')\n","    plt.plot(total_val_loss, label='Validation Loss')\n","    plt.plot([initial_epochs-1, initial_epochs-1],\n","              plt.ylim(), label='Start Fine Tuning') # reshift plot around epochs\n","    plt.legend(loc='upper right')\n","    plt.title('Training and Validation Loss')\n","    plt.xlabel('epoch')\n","    plt.show()"],"metadata":{"id":"7HxHP7lJGPpt","executionInfo":{"status":"aborted","timestamp":1688739822243,"user_tz":-480,"elapsed":7,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["compare_historys(original_history=history_10_percent_data_aug,\n","                 new_history=history_fine_10_percent_data_aug,\n","                 initial_epochs=5)"],"metadata":{"id":"FsE6EPsqH6-T","executionInfo":{"status":"aborted","timestamp":1688739822244,"user_tz":-480,"elapsed":8,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Download and unzip 10 classes of data with all images\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_all_data.zip\n","unzip_data(\"10_food_classes_all_data.zip\")\n","\n","# Setup data directories\n","train_dir = \"10_food_classes_all_data/train/\"\n","test_dir = \"10_food_classes_all_data/test/\""],"metadata":{"id":"OU0CN428H8wd","executionInfo":{"status":"aborted","timestamp":1688739822245,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["walk_through_dir('10_food_classes_all_data')"],"metadata":{"id":"xlGftGVvH_yv","executionInfo":{"status":"aborted","timestamp":1688739822245,"user_tz":-480,"elapsed":9,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"TfKBqgL2tVBd","executionInfo":{"status":"aborted","timestamp":1688739822246,"user_tz":-480,"elapsed":10,"user":{"displayName":"Jovan Chua","userId":"02891103034076238473"}}},"execution_count":null,"outputs":[]}]}